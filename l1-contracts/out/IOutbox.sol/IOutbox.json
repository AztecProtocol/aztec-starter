{"abi":[{"type":"function","name":"consume","inputs":[{"name":"_message","type":"tuple","internalType":"struct DataStructures.L2ToL1Msg","components":[{"name":"sender","type":"tuple","internalType":"struct DataStructures.L2Actor","components":[{"name":"actor","type":"bytes32","internalType":"bytes32"},{"name":"version","type":"uint256","internalType":"uint256"}]},{"name":"recipient","type":"tuple","internalType":"struct DataStructures.L1Actor","components":[{"name":"actor","type":"address","internalType":"address"},{"name":"chainId","type":"uint256","internalType":"uint256"}]},{"name":"content","type":"bytes32","internalType":"bytes32"}]},{"name":"_l2BlockNumber","type":"uint256","internalType":"uint256"},{"name":"_leafIndex","type":"uint256","internalType":"uint256"},{"name":"_path","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getRootData","inputs":[{"name":"_l2BlockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"root","type":"bytes32","internalType":"bytes32"},{"name":"minHeight","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"hasMessageBeenConsumedAtBlockAndIndex","inputs":[{"name":"_l2BlockNumber","type":"uint256","internalType":"uint256"},{"name":"_leafIndex","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"insert","inputs":[{"name":"_l2BlockNumber","type":"uint256","internalType":"uint256"},{"name":"_root","type":"bytes32","internalType":"bytes32"},{"name":"_minHeight","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"MessageConsumed","inputs":[{"name":"l2BlockNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"root","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"messageHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"leafIndex","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RootAdded","inputs":[{"name":"l2BlockNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"root","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"minHeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"consume(((bytes32,uint256),(address,uint256),bytes32),uint256,uint256,bytes32[])":"7fb34967","getRootData(uint256)":"2249f653","hasMessageBeenConsumedAtBlockAndIndex(uint256,uint256)":"84f15db2","insert(uint256,bytes32,uint256)":"3d96c2c9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2BlockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"}],\"name\":\"MessageConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2BlockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minHeight\",\"type\":\"uint256\"}],\"name\":\"RootAdded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"actor\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructures.L2Actor\",\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructures.L1Actor\",\"name\":\"recipient\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"content\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataStructures.L2ToL1Msg\",\"name\":\"_message\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leafIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_path\",\"type\":\"bytes32[]\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"}],\"name\":\"getRootData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leafIndex\",\"type\":\"uint256\"}],\"name\":\"hasMessageBeenConsumedAtBlockAndIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minHeight\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aztec Labs\",\"kind\":\"dev\",\"methods\":{\"consume(((bytes32,uint256),(address,uint256),bytes32),uint256,uint256,bytes32[])\":{\"details\":\"Only useable by portals / recipients of messagesEmits `MessageConsumed` when consuming messages\",\"params\":{\"_l2BlockNumber\":\"- The block number specifying the block that contains the message we want to consume\",\"_leafIndex\":\"- The index inside the merkle tree where the message is located\",\"_message\":\"- The L2 to L1 message\",\"_path\":\"- The sibling path used to prove inclusion of the message, the _path length directly depends on the total amount of L2 to L1 messages in the block. i.e. the length of _path is equal to the depth of the L1 to L2 message tree.\"}},\"getRootData(uint256)\":{\"params\":{\"_l2BlockNumber\":\"- The block number to fetch the root data for\"},\"returns\":{\"minHeight\":\"- The min height for the merkle tree that the root corresponds to\",\"root\":\"- The root of the merkle tree containing the L2 to L1 messages\"}},\"hasMessageBeenConsumedAtBlockAndIndex(uint256,uint256)\":{\"details\":\"- This function does not throw. Out-of-bounds access is considered valid, but will always return false\",\"params\":{\"_l2BlockNumber\":\"- The block number specifying the block that contains the index of the message we want to check\",\"_leafIndex\":\"- The index of the message inside the merkle tree\"}},\"insert(uint256,bytes32,uint256)\":{\"details\":\"Only callable by the rollup contractEmits `RootAdded` upon inserting the root successfully\",\"params\":{\"_l2BlockNumber\":\"- The L2 Block Number in which the L2 to L1 messages reside\",\"_minHeight\":\"- The min height of the merkle tree that the root corresponds to\",\"_root\":\"- The merkle root of the tree where all the L2 to L1 messages are leaves\"}}},\"title\":\"IOutbox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"consume(((bytes32,uint256),(address,uint256),bytes32),uint256,uint256,bytes32[])\":{\"notice\":\"Consumes an entry from the Outbox\"},\"getRootData(uint256)\":{\"notice\":\"Fetch the root data for a given block number          Returns (0, 0) if the block is not proven\"},\"hasMessageBeenConsumedAtBlockAndIndex(uint256,uint256)\":{\"notice\":\"Checks to see if an index of the L2 to L1 message tree for a specific block has been consumed\"},\"insert(uint256,bytes32,uint256)\":{\"notice\":\"Inserts the root of a merkle tree containing all of the L2 to L1 messages in a block specified by _l2BlockNumber.\"}},\"notice\":\"Lives on L1 and is used to consume L2 -> L1 messages. Messages are inserted by the Rollup and will be consumed by the portal contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/aztec-packages/l1-contracts/src/core/interfaces/messagebridge/IOutbox.sol\":\"IOutbox\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@aztec/=lib/aztec-packages/l1-contracts/src/\",\":aztec-packages/=lib/aztec-packages/\",\":ds-test/=lib/aztec-packages/barretenberg/sol/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/aztec-packages/l1-contracts/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/aztec-packages/l1-contracts/lib/forge-std/src/\",\":halmos-cheatcodes/=lib/aztec-packages/l1-contracts/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/aztec-packages/l1-contracts/lib/openzeppelin-contracts/\",\":solidity-stringutils/=lib/aztec-packages/barretenberg/sol/lib/solidity-stringutils/\"]},\"sources\":{\"lib/aztec-packages/l1-contracts/src/core/interfaces/messagebridge/IOutbox.sol\":{\"keccak256\":\"0x77eb91bec9c6cd1d2cf6ae8ea7452b29848d1047e92519e6562004364d2e0eb9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4a794b428c9ab9324dfc3c0d6cd1c6f4704bc079b4e139e1f9dd572b255efabe\",\"dweb:/ipfs/QmYB4h9VWD8YT1Kpb7Su47RMQEM8bofDvJkskk8deQFv7X\"]},\"lib/aztec-packages/l1-contracts/src/core/libraries/DataStructures.sol\":{\"keccak256\":\"0x2b7c456679ab2784eab2b30d9c261cc96b4cb9cd2a65d451feb1d687d6d41be0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://accb06083a4424edd1d1d2a79da6d8858537a15c0c0a1ef1c34816409016c8af\",\"dweb:/ipfs/QmVUvUJqvLZwuLX93s4cd5W51ducWSQV5vzAdTNMGrfXSE\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"l2BlockNumber","type":"uint256","indexed":true},{"internalType":"bytes32","name":"root","type":"bytes32","indexed":true},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":true},{"internalType":"uint256","name":"leafIndex","type":"uint256","indexed":false}],"type":"event","name":"MessageConsumed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"l2BlockNumber","type":"uint256","indexed":true},{"internalType":"bytes32","name":"root","type":"bytes32","indexed":true},{"internalType":"uint256","name":"minHeight","type":"uint256","indexed":false}],"type":"event","name":"RootAdded","anonymous":false},{"inputs":[{"internalType":"struct DataStructures.L2ToL1Msg","name":"_message","type":"tuple","components":[{"internalType":"struct DataStructures.L2Actor","name":"sender","type":"tuple","components":[{"internalType":"bytes32","name":"actor","type":"bytes32"},{"internalType":"uint256","name":"version","type":"uint256"}]},{"internalType":"struct DataStructures.L1Actor","name":"recipient","type":"tuple","components":[{"internalType":"address","name":"actor","type":"address"},{"internalType":"uint256","name":"chainId","type":"uint256"}]},{"internalType":"bytes32","name":"content","type":"bytes32"}]},{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_leafIndex","type":"uint256"},{"internalType":"bytes32[]","name":"_path","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"consume"},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRootData","outputs":[{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint256","name":"minHeight","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_leafIndex","type":"uint256"}],"stateMutability":"view","type":"function","name":"hasMessageBeenConsumedAtBlockAndIndex","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"bytes32","name":"_root","type":"bytes32"},{"internalType":"uint256","name":"_minHeight","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"insert"}],"devdoc":{"kind":"dev","methods":{"consume(((bytes32,uint256),(address,uint256),bytes32),uint256,uint256,bytes32[])":{"details":"Only useable by portals / recipients of messagesEmits `MessageConsumed` when consuming messages","params":{"_l2BlockNumber":"- The block number specifying the block that contains the message we want to consume","_leafIndex":"- The index inside the merkle tree where the message is located","_message":"- The L2 to L1 message","_path":"- The sibling path used to prove inclusion of the message, the _path length directly depends on the total amount of L2 to L1 messages in the block. i.e. the length of _path is equal to the depth of the L1 to L2 message tree."}},"getRootData(uint256)":{"params":{"_l2BlockNumber":"- The block number to fetch the root data for"},"returns":{"minHeight":"- The min height for the merkle tree that the root corresponds to","root":"- The root of the merkle tree containing the L2 to L1 messages"}},"hasMessageBeenConsumedAtBlockAndIndex(uint256,uint256)":{"details":"- This function does not throw. Out-of-bounds access is considered valid, but will always return false","params":{"_l2BlockNumber":"- The block number specifying the block that contains the index of the message we want to check","_leafIndex":"- The index of the message inside the merkle tree"}},"insert(uint256,bytes32,uint256)":{"details":"Only callable by the rollup contractEmits `RootAdded` upon inserting the root successfully","params":{"_l2BlockNumber":"- The L2 Block Number in which the L2 to L1 messages reside","_minHeight":"- The min height of the merkle tree that the root corresponds to","_root":"- The merkle root of the tree where all the L2 to L1 messages are leaves"}}},"version":1},"userdoc":{"kind":"user","methods":{"consume(((bytes32,uint256),(address,uint256),bytes32),uint256,uint256,bytes32[])":{"notice":"Consumes an entry from the Outbox"},"getRootData(uint256)":{"notice":"Fetch the root data for a given block number          Returns (0, 0) if the block is not proven"},"hasMessageBeenConsumedAtBlockAndIndex(uint256,uint256)":{"notice":"Checks to see if an index of the L2 to L1 message tree for a specific block has been consumed"},"insert(uint256,bytes32,uint256)":{"notice":"Inserts the root of a merkle tree containing all of the L2 to L1 messages in a block specified by _l2BlockNumber."}},"version":1}},"settings":{"remappings":["@aztec/=lib/aztec-packages/l1-contracts/src/","aztec-packages/=lib/aztec-packages/","ds-test/=lib/aztec-packages/barretenberg/sol/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/aztec-packages/l1-contracts/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/aztec-packages/l1-contracts/lib/forge-std/src/","halmos-cheatcodes/=lib/aztec-packages/l1-contracts/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/aztec-packages/l1-contracts/lib/openzeppelin-contracts/","solidity-stringutils/=lib/aztec-packages/barretenberg/sol/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/aztec-packages/l1-contracts/src/core/interfaces/messagebridge/IOutbox.sol":"IOutbox"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/aztec-packages/l1-contracts/src/core/interfaces/messagebridge/IOutbox.sol":{"keccak256":"0x77eb91bec9c6cd1d2cf6ae8ea7452b29848d1047e92519e6562004364d2e0eb9","urls":["bzz-raw://4a794b428c9ab9324dfc3c0d6cd1c6f4704bc079b4e139e1f9dd572b255efabe","dweb:/ipfs/QmYB4h9VWD8YT1Kpb7Su47RMQEM8bofDvJkskk8deQFv7X"],"license":"Apache-2.0"},"lib/aztec-packages/l1-contracts/src/core/libraries/DataStructures.sol":{"keccak256":"0x2b7c456679ab2784eab2b30d9c261cc96b4cb9cd2a65d451feb1d687d6d41be0","urls":["bzz-raw://accb06083a4424edd1d1d2a79da6d8858537a15c0c0a1ef1c34816409016c8af","dweb:/ipfs/QmVUvUJqvLZwuLX93s4cd5W51ducWSQV5vzAdTNMGrfXSE"],"license":"Apache-2.0"}},"version":1},"id":1}