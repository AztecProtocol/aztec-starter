mod test;
contract EasyPrivateVoting {
    use dep::aztec::prelude::{
        AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext,
        Map, PublicMutable, SharedImmutable, PrivateMutable
    };
    use dep::aztec::{
        oracle::{execution::{get_block_number, get_contract_address}, unsafe_rand::unsafe_rand, storage::storage_read},
        protocol_types::storage::map::derive_storage_slot_in_map
    };
    use dep::value_note::{value_note::ValueNote};

    #[aztec(storage)]
    struct Storage {
        admin: PublicMutable<AztecAddress>, // admin can end vote
        tally: Map<Field, PublicMutable<Field>>, // we will store candidate as key and number of votes as value
        vote_ended: PublicMutable<bool>, // vote_ended is boolean
        active_at_block: SharedImmutable<u32>, // when people can start voting
        user_notes: Map<AztecAddress, PrivateMutable<ValueNote>> // user notes
    }

    #[aztec(public)]
    #[aztec(initializer)] // annotation to mark function as a constructor
    fn constructor(admin: AztecAddress) {
        storage.admin.write(admin);
        storage.vote_ended.write(false);
        storage.active_at_block.initialize(context.block_number() as u32);
    }

    #[aztec(public)]
    #[aztec(initializer)]
    fn initialize(admin: AztecAddress) {
        storage.admin.write(admin);
        storage.vote_ended.write(false);
        storage.active_at_block.initialize(context.block_number() as u32);
    }

    #[aztec(private)]
    fn create_note() {
        let header = context.get_header_at(get_block_number() - 2);
        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());
        let mut note = ValueNote::new(1, msg_sender_npk_m_hash);
        let _ = storage.user_notes.at(context.msg_sender()).initialize(&mut note);
    }

    #[aztec(private)]
    fn read_note(owner: AztecAddress) -> pub Field {
        let note = storage.user_notes.at(owner).get_note().note;
        let value = note.value;
        value
    }

    #[aztec(private)] // annotation to mark function as private and expose private context
    fn cast_vote(candidate: Field) {
        // Below, we make sure to get our nullifier public key at a specific block. By pinning the nullifier public key at a specific block,
        // rotating keys will have no effect on the nullifier being produced, and voting again after will fail because the same nullifier is computed each time the user votes.
        let header_at_active_at_block = context.get_header_at(storage.active_at_block.read_private());
        let msg_sender_npk_m_hash = header_at_active_at_block.get_npk_m_hash(&mut context, context.msg_sender());

        let secret = context.request_nsk_app(msg_sender_npk_m_hash); // get secret key of caller of function
        let nullifier = std::hash::pedersen_hash([context.msg_sender().to_field(), secret]); // derive nullifier from sender and secret
        context.push_nullifier(nullifier, 0); // push nullifier
        EasyPrivateVoting::at(context.this_address()).add_to_tally_public(candidate).enqueue(&mut context);
    }

    #[aztec(public)]
    #[aztec(internal)]
    fn add_to_tally_public(candidate: Field) {
        assert(storage.vote_ended.read() == false, "Vote has ended"); // assert that vote has not ended
        let new_tally = storage.tally.at(candidate).read() + 1;
        storage.tally.at(candidate).write(new_tally);
    }

    #[aztec(public)] 
    fn end_vote() {
        assert(storage.admin.read().eq(context.msg_sender()), "Only admin can end votes"); // assert that caller is admin
        storage.vote_ended.write(true);
    }
    unconstrained fn get_vote(candidate: Field) -> pub Field {
        storage.tally.at(candidate).read()
    }
}

